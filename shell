shell执行机制:	当一个文件中开头的两个字符是#!时，内核会扫描该行的其余部分，看是否存在可用来执行程序的解释器的完整路径，中间的空白符号都会略过，此外还会扫描是否有一个选项要传递给解释器，内核会以被指定的选项来引用解释器，再搭配命令行的其他部分

shell格式:	选项的开头是一个破折号，后面接一个字母，不需要参数的选项可以合并
			长选项可以是一个或两个破折号
			分号用来分割同一行里的多条命令。如果使用&分隔，则shell将在后台执行其前面的命令
			shell识别三种命令:内部命令 shell函数 外部命令

shell执行外部命令过程:	
				建立一个新的进程
				在新的进程里，在PATH变量内所列出的目录中寻找特点的命令
				在新的进程里，以所找到的新程序取代执行中的shell程序并执行
				程序完成后，最初的shell会接着从终端读取下一条命令或执行脚本里的下一条命令

变量:	就是为某个信息片段起的名字
		变量赋值的方式是:	先写变量名称，紧接着=字符，最后是新值，中间完全没有任何空格，赋予的值内含有空格时需加引号
		取出变量值时，需要在变量名前加$

重定向符:	>	在文件不存在的情况下会新建一个
			>>	附加到文件尾，文件不存则新建

管道:	把前一个程序的输出变成后一个程序的输入

特殊文件:	/dev/null	
			/dev/tty

stty:	用来控制终端的各种设置 -echo选项用来关闭自动打印每个输入字符的功能，echo用来恢复该功能

shell脚本的参数:	就是执行shell脚本的命令行参数，在shell函数中，同时可以是函数的参数
					各参数都是由整数来命名，当它超过9时，应该用大括号把数字括起来
					通过特殊变量，可以取得参数的总数以及一次取得所有参数

注释:	shell会忽略由#开头的每一个行

简单的执行跟踪:	打开执行跟踪功能后，会使shell显示每个被执行到的命令并在前面加上“+”，一个加号后面跟着一个空格。可以通过给变量PS4赋一个新值以改变打印方式
				可以在脚本里用set -x 打开执行跟踪再用+x命令关闭
