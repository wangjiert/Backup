1.zookeeper通过类似文件系统的层级命名空间来协调分布式应用，名字空间（znode）由注册的数据组成，znode数据是存储在内存中的，
2.组成zookeeper服务的服务端必须知道彼此的存在，他们在内存中维护一个状态的镜像，并在持久化存储中维护事务的log日志以及快照
3.客户端通过tcp连接到其中一个服务端，如果这个tcp连接断开了，客户端会自动连接到另一个服务端
4.zookeeper通过给每一个更新赋予一个数字来反映事务的顺序
5.zookeeper维护一个stat结构体，这个结构体包含了版本数字、数据变更、ACL（访问权限标记）变更、时间来允许缓存验证和协调更新，znode每次更新数据时，版本数字都会增加
6.读取znode时会得到全部的数据，写入znode时会替换全部的数据，znode有一个ACL来控制谁可以做什么
7.znode分为临时节点和持久节点，临时节点只有在会话没有断开时才存在
8.客户端可以在一个znode上面设置监视器，当一个znode变化时，监视器会被触发并从znode上删除，当客户端和服务端的连接断开时，客户端会收到一个本地的通知
9.zookeeper的承诺：
	a.顺序一致，一个客户端的更新会以它们发生的顺序执行
	b.原子性，更新要么成功要么失败，不会局部被更改
	c.一个系统镜像，无论客户端连接到哪个服务端，看到的服务端视图一样
	d.可靠性，一旦一个更新成功，将会持续到再次更新
	e.实时性，系统中客户端的视图在一个时间界内是最新的
10.临时节点不能有子节点
11.有序节点，创建一个节点时可以让zookeeper在路径后面加上一个单调递增的计数，对于父节点来说，计数器是唯一的，计数器的值是有符号整型（4字节），持续增长时可能会溢出达到负数

